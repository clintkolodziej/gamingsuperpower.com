#image-add .field{position:relative;display:block;float:none;margin:1.625em 0;padding:0}#image-add .field label{display:block;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;position:relative;top:auto;left:auto;width:auto}#dialog-alert,#page-alert{margin:1.625em 0}.deleting{opacity:.4;animation-duration:.5s}@keyframes delete-animation{0%{opacity:.4;transform:scale(100%,100%)}100%{opacity:0;transform:scale(0,0)}}.button-progress-wrap{position:relative;display:inline-block}#progress,#progress-bar{position:absolute;bottom:0;left:0}#progress{display:none;right:0;height:.5em;background-color:#fbb03b}#progress-bar{top:0;display:inline-block;width:50%;background-color:#15152b}#images ul{padding:0;list-style:none;display:flex;flex-direction:row;flex-wrap:wrap;justify-content:flex-start;align-items:stretch;align-content:stretch;margin-right:-.75rem;margin-left:-.75rem}#images li{position:relative;margin-bottom:1.625em;transition:all .25s;flex-basis:auto;margin-left:.75rem;margin-right:.75rem;flex-grow:1;flex-shrink:1;align-self:auto}@media screen and (min-width:41.5rem){#images li{flex-basis:18.5rem;margin-left:.75rem;margin-right:.75rem;flex-grow:0;flex-shrink:0;align-self:auto}}#images img{display:block}#images .delete{position:absolute;top:-.5em;right:-.5em;width:1.25em;height:1.25em;background-color:#c20;border-radius:50%;box-shadow:0 2px 5px rgba(0,0,0,.25);color:#fff;font-weight:400;line-height:1.25em;vertical-align:middle}#images .delete::before{content:'\00d7'}#image-add h2{margin-top:0}#image-add form{text-align:left}#image-add form input{width:100%}#image-add p{text-align:right}#image-add .buttons{margin-top:3.25em;text-align:center}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
