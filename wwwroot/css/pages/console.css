#intro h2 small,#intro h3{text-decoration:underline}#intro h2,#intro h3{top:0;margin-left:8%;width:75%;z-index:2}#intro,#summary ul li{box-sizing:border-box;position:relative}#intro,#summary ul a,#summary ul li{position:relative}#intro h2,#intro h3,#summary ul a{text-align:left;color:#fff}#intro h2,#intro h3,#summary ul a::after{position:absolute;left:0}#summary ul a,#summary ul a img{display:block}#intro{height:25em;background:#222;overflow:hidden}#intro h2{margin-top:6rem;font-size:2.5em;text-shadow:.125em .125em 0 rgba(0,0,0,.75)}#intro h2 small{display:block;margin-top:.25em;color:#aaa;font-size:.5em}#intro h3{margin-top:3rem;opacity:.5;font-size:1em}#intro img{position:absolute;left:50%;top:50%;width:100%;max-width:none;transform:translate(-50%,-50%);z-index:1}#summary ul{list-style:none;margin:0;padding:0;display:flex;flex-wrap:wrap;justify-content:space-between}#summary ul li{width:25%;flex-grow:1;padding:1em;transition:all .15s ease-in-out}@media screen and (min-width:31.5rem){#summary ul li{width:33.3333%}}#summary ul a{margin:0}#summary ul a::after{content:attr(title);bottom:0;right:0;padding-left:1em;font-style:normal;margin:.75em 0 .5em;font-weight:400;font-size:.65em;font-family:"Press Start 2P",sans-serif}#summary ul a:hover{box-shadow:0 0 40px rgba(0,0,0,.25);z-index:999;transform:scale(1.05)}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
